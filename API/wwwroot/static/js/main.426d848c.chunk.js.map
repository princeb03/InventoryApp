{"version":3,"sources":["models/pagination.ts","api/agent.ts","stores/inventoryStore.ts","stores/profileStore.ts","stores/userStore.ts","stores/store.ts","stores/orderStore.ts","stores/modalStore.ts","features/cart/OrderCart.tsx","layout/LoadingComponent.tsx","features/inventory/ItemCard.tsx","features/inventory/ItemForm.tsx","features/inventory/Dashboard.tsx","features/photos/PhotoWidgetCropper.tsx","features/photos/PhotoWidgetDropZone.tsx","features/photos/PhotoUploadWidget.tsx","features/inventory/EditItemForm.tsx","features/inventory/ItemDetails.tsx","features/orders/OrderDetails.tsx","features/profile/ProfileDetailsForm.tsx","features/profile/ProfileOrderFilters.tsx","features/profile/Profile.tsx","features/accounts/LoginForm.tsx","layout/LandingPage.tsx","layout/NavBar.tsx","features/accounts/RegisterForm.tsx","features/accounts/UserList.tsx","layout/ModalContainer.tsx","layout/PrivateRoute.tsx","App.tsx","reportWebVitals.ts","layout/ScrollToTop.tsx","index.tsx"],"names":["PaginatedResult","data","pagination","this","PagingParams","pageNumber","pageSize","axios","defaults","baseURL","process","interceptors","request","use","config","token","localStorage","getItem","headers","Authorization","response","a","JSON","parse","error","status","statusText","hasOwnProperty","toast","title","message","Promise","reject","responseBody","requests","url","get","then","body","post","put","delete","agent","Inventory","getAll","params","id","create","update","uploadPhoto","file","itemId","formData","FormData","append","setMainPhoto","photoId","deletePhoto","Accounts","login","user","register","getCurrent","username","Orders","createOrder","order","toggleOrder","getOrder","editNotes","notes","Profiles","getProfile","InventoryStore","inventoryRegistry","Map","currentItem","loadingInitial","loading","uploading","pagingParams","searchString","resetStore","clear","setPagingParams","setSearchString","value","axiosParams","paginatedInventory","runInAction","forEach","item","set","console","log","createNew","newItem","history","push","store","modalStore","closeModal","info","autoClose","updateItem","itemDetails","getDetails","photo","photos","isMain","mainPhoto","find","p","filter","makeAutoObservable","reaction","URLSearchParams","toString","Array","from","values","sort","b","itemName","localeCompare","ProfileStore","profileUser","orderRegistry","profiles","orderFilters","setOrderFilter","resetFilter","profile","displayName","email","orders","orderCompletedAt","format","Date","orderCreatedAt","updateUser","userForm","password","updatedUsername","keys","key","getTime","UserStore","currentUser","userRegistry","setItem","logout","removeItem","orderStore","resetCart","inventoryStore","getCurrentUser","getAllUsers","paginatedUsers","userStore","cart","currentOrder","addToCart","orderItem","product","quantity","saveCartToStorage","removeFromCart","index","splice","placeOrder","itemsToOrder","map","mapItemToApi","orderItems","json","stringify","setCart","savedCart","orderId","updatedNotes","profileStore","modal","open","openModal","content","StoreContext","createContext","useStore","useContext","observer","useState","orderNotes","setOrderNotes","useEffect","Header","as","length","Button","Link","to","size","color","icon","Form","TextArea","name","onChange","e","currentTarget","placeholder","SegmentGroup","Segment","Grid","doubling","stackable","GridColumn","width","verticalAlign","Image","src","itemDescription","textAlign","floated","onClick","negative","LoadingComponent","inverted","Dimmer","active","Loader","setQuantity","Card","fluid","CardContent","CardHeader","style","whiteSpace","overflow","textOverflow","CardMeta","CardDescription","availableStock","totalStock","extra","marginBottom","Group","widths","Field","Input","type","min","step","valueAsNumber","height","initialState","itemData","setItemData","handleChange","onSubmit","padding","label","required","inventoryItems","loadingNext","setLoadingNext","search","setSearch","role","Row","Column","iconPosition","pageStart","loadMore","currentPage","itemsPerPage","hasMore","totalPages","initialLoad","columns","marginTop","PhotoWidgetCropper","imagePreview","setCropper","initialAspectRatio","aspectRatio","preview","guides","viewMode","autoCropArea","background","onInitialized","PhotoWidgetDropzone","setFiles","dzStyles","border","borderColor","borderRadius","paddingTop","onDrop","useCallback","acceptedFiles","Object","assign","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","Icon","PhotoUploadWidget","files","cropper","revokeObjectURL","sub","className","minHeight","ButtonGroup","getCroppedCanvas","toBlob","blob","positive","disabled","useParams","addPhotoMode","setAddPhotoMode","target","setTarget","display","circular","marginLeft","itemsPerRow","handleSetMainPhoto","handleDeletePhoto","editMode","setEditMode","orderStatus","rows","Table","HeaderCell","Body","Cell","setFormData","Menu","vertical","attached","Item","has","profileOrders","Label","loginData","setLoginData","isLoggedIn","alignItems","backgroundImage","Container","fontSize","marginRight","fixed","MenuItem","exact","NavLink","position","Dropdown","pointing","text","DropdownMenu","DropdownItem","registerData","setregisterData","userList","Modal","onClose","PrivateRoute","Component","component","rest","render","props","App","theme","transition","Flip","path","LandingPage","Dashboard","ItemDetails","OrderCart","Profile","OrderDetails","UserList","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ScrollToTop","pathname","useLocation","window","scrollTo","createBrowserHistory","ReactDOM","Provider","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.426d848c.chunk.js","sourcesContent":["export interface Pagination {\r\n    currentPage: number;\r\n    itemsPerPage: number;\r\n    totalItems: number;\r\n    totalPages: number;\r\n}\r\n\r\nexport class PaginatedResult<T> {\r\n    data: T;\r\n    pagination: Pagination;\r\n\r\n    constructor(data: T, pagination: Pagination) {\r\n        this.data = data;\r\n        this.pagination = pagination;\r\n    }\r\n}\r\n\r\nexport class PagingParams {\r\n    pageSize;\r\n    pageNumber;\r\n\r\n    constructor(pageNumber = 1, pageSize = 6) {\r\n        this.pageNumber = pageNumber;\r\n        this.pageSize = pageSize;\r\n    }\r\n}","import axios, { AxiosError, AxiosResponse } from \"axios\";\r\nimport { toast } from \"react-toastify\";\r\nimport { InventoryItem, InventoryItemFormValues } from \"../models/inventoryItem\";\r\nimport { CreateOrderDto } from \"../models/order\";\r\nimport { PaginatedResult } from \"../models/pagination\";\r\nimport Photo from \"../models/photo\";\r\nimport { Profile, ProfileOrder } from \"../models/profile\";\r\nimport { User, UserFormValues } from \"../models/user\";\r\n\r\n\r\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\r\nconst sleep = (delay: number) => {\r\n    return new Promise(resolve => {\r\n        setTimeout(resolve, delay);\r\n    });\r\n};\r\n\r\naxios.interceptors.request.use(config => {\r\n    const token = localStorage.getItem('inventoryToken');\r\n    if (token) {\r\n        config.headers = {\r\n            Authorization: `Bearer ${token}`\r\n        };\r\n    }\r\n    return config;\r\n});\r\n\r\naxios.interceptors.response.use( async response => {\r\n    if (process.env.NODE_ENV === 'development') await sleep(1000);\r\n    const pagination = response.headers[\"pagination\"];\r\n    if (pagination) {\r\n        response.data = new PaginatedResult(response.data, JSON.parse(pagination));\r\n        return response as AxiosResponse<PaginatedResult<any>>;\r\n    }\r\n    return response;\r\n}, (error: AxiosError) => {\r\n    const { data, status, statusText } = error.response!;\r\n    if (!data) toast.error(statusText);\r\n    else if (data.hasOwnProperty('errors')) {\r\n        toast.error(data.title);\r\n    }\r\n    else {\r\n        switch(status) {\r\n            case 500:\r\n                toast.error(data.message);\r\n                break;\r\n            default:\r\n                toast.error(data);\r\n        }\r\n    }\r\n    \r\n    return Promise.reject(error);\r\n});\r\n\r\nconst responseBody = <T>(response: AxiosResponse<T>) => response.data;\r\n\r\nconst requests = {\r\n    get: <T>(url: string) => axios.get<T>(url).then(responseBody),\r\n    post: <T>(url: string, body: {}) => axios.post<T>(url, body).then(responseBody),\r\n    put: <T>(url: string, body: {}) => axios.put<T>(url, body).then(responseBody),\r\n    delete: <T>(url: string) => axios.delete<T>(url).then(responseBody)\r\n};\r\n\r\nconst Inventory = {\r\n    getAll: (params: URLSearchParams) => axios.get<PaginatedResult<InventoryItem[]>>('/inventory', {params}).then(responseBody),\r\n    get: (id: string) => requests.get<InventoryItem>(`/inventory/${id}`),\r\n    create: (body: InventoryItemFormValues) => requests.post<string>('/inventory', body),\r\n    update: (body: InventoryItemFormValues) => requests.put<void>(`/inventory/${body.id}`, body),\r\n    uploadPhoto: (file: Blob, itemId: string) => {\r\n        let formData = new FormData();\r\n        formData.append('File', file);\r\n        return axios.post<Photo>(`/photos/${itemId}`, formData, {\r\n            headers: {'Content-type': 'multipart/form-data'}\r\n        });\r\n    },\r\n    setMainPhoto: (itemId: string, photoId: string) => requests.post<void>(`/photos/${itemId}/${photoId}/setMain`, {}),\r\n    deletePhoto: (itemId: string, photoId: string) => requests.delete<void>(`/photos/${itemId}/${photoId}`)\r\n};\r\n\r\nconst Accounts = {\r\n    login: (user: UserFormValues) => requests.post<User>('/accounts/login', user),\r\n    register: (user: UserFormValues) => requests.post<void>('/accounts/register', user),\r\n    getCurrent: () => requests.get<User>('/accounts/current'),\r\n    getAll: (params: URLSearchParams) => axios.get<PaginatedResult<User[]>>('/accounts', {params}).then(responseBody),\r\n    update: (user: UserFormValues, username: string) => requests.put<string>(`/accounts/${username}`, user)\r\n};\r\n\r\nconst Orders = {\r\n    createOrder: (order: CreateOrderDto) => requests.post<void>('/orders', order),\r\n    getAll: () => requests.get<any>('/orders'),\r\n    toggleOrder: (id: string) => requests.put<void>(`/orders/${id}/complete`, {}),\r\n    getOrder: (id: string) => requests.get<ProfileOrder>(`/orders/${id}`),\r\n    editNotes: (id: string, notes: string) => requests.put<void>(`/orders/${id}/notes`, {notes})\r\n};\r\n\r\nconst Profiles = {\r\n    getProfile: (username: string, params: URLSearchParams) => axios.get<PaginatedResult<Profile>>(`/profiles/${username}`, {params}).then(responseBody)\r\n};\r\n\r\nconst agent = {\r\n    Inventory,\r\n    Accounts,\r\n    Orders,\r\n    Profiles\r\n};\r\n\r\nexport default agent;","import { makeAutoObservable, reaction, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { InventoryItem, InventoryItemFormValues } from \"../models/inventoryItem\";\r\nimport { Pagination, PagingParams } from \"../models/pagination\";\r\nimport Photo from \"../models/photo\";\r\nimport { history } from \"..\";\r\nimport { store } from \"./store\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nexport class InventoryStore {\r\n    inventoryRegistry = new Map<string, InventoryItem>();\r\n    \r\n    currentItem: InventoryItem | null = null;\r\n    loadingInitial = true;\r\n    loading = false;\r\n    uploading = false;\r\n    pagination: Pagination | null = null;\r\n    pagingParams = new PagingParams();\r\n    searchString = '';\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n        reaction(\r\n            () => this.searchString,\r\n            () => {\r\n                this.pagingParams = new PagingParams();\r\n                this.inventoryRegistry.clear();\r\n                this.getAll();\r\n            }\r\n        )\r\n    }\r\n\r\n    resetStore = () => {\r\n        this.inventoryRegistry.clear();\r\n        this.pagination = null;\r\n        this.pagingParams = new PagingParams();\r\n        this.searchString = '';\r\n    }\r\n\r\n    get axiosParams() {\r\n        const params = new URLSearchParams();\r\n        params.append('pageNumber', this.pagingParams.pageNumber.toString());\r\n        params.append('pageSize', this.pagingParams.pageSize.toString());\r\n        params.append('searchString', this.searchString);\r\n        return params;\r\n    }\r\n    \r\n    get inventoryItems() {\r\n        return Array.from(this.inventoryRegistry.values()).sort((a, b) => a.itemName.localeCompare(b.itemName));\r\n    }\r\n\r\n    setPagingParams = (pagingParams: PagingParams) => {\r\n        this.pagingParams = pagingParams;\r\n    }\r\n\r\n    setSearchString = (value: string) => {\r\n        this.searchString = value;\r\n    }\r\n\r\n    getAll = async () => {\r\n        this.loadingInitial = true;\r\n        try {\r\n            const paginatedInventory = await agent.Inventory.getAll(this.axiosParams);\r\n            runInAction(() => {\r\n                paginatedInventory.data.forEach((item) => {\r\n                    this.inventoryRegistry.set(item.id, item);\r\n                });\r\n                this.pagination = paginatedInventory.pagination;\r\n                this.loadingInitial = false;\r\n            });\r\n        } catch(err) {\r\n            console.log(err);\r\n            this.loadingInitial = false;\r\n        }\r\n    }\r\n\r\n    createNew = async (newItem: InventoryItemFormValues) => {\r\n        this.loading = true;\r\n        try {\r\n            const itemId = await agent.Inventory.create(newItem);\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            });\r\n            history.push(`/items/${itemId}`);\r\n            store.modalStore.closeModal();\r\n            toast.info('New Item Added', {autoClose: 1000});\r\n        } catch(err) {\r\n            console.log(err);\r\n            this.loading = false;\r\n        }\r\n    }\r\n\r\n    updateItem = async (itemDetails: InventoryItemFormValues) => {\r\n        this.loading = true;\r\n        const id = this.currentItem!.id;\r\n        try {\r\n            await agent.Inventory.update(itemDetails);\r\n            runInAction(() => {\r\n                this.loading = false;\r\n                store.modalStore.closeModal();\r\n                this.getDetails(id);\r\n            });            \r\n            toast.info('Item Updated', {autoClose: 1000});\r\n        } catch(err) {\r\n            console.log(err);\r\n            this.loading = false;\r\n        }\r\n    }\r\n\r\n    getDetails = async (id: string) => {\r\n        try {\r\n            this.loadingInitial = true;\r\n            const item = await agent.Inventory.get(id);\r\n            runInAction(() => {\r\n                this.currentItem = item;\r\n                this.loadingInitial = false\r\n            }); \r\n        } catch(err) {\r\n            console.log(err);\r\n            this.loadingInitial = false;\r\n        }\r\n    }\r\n\r\n    uploadPhoto = async (file: Blob, itemId: string) => {\r\n        this.uploading = true;\r\n        try {\r\n            const response = await agent.Inventory.uploadPhoto(file, itemId);\r\n            const photo = response.data;\r\n            runInAction(() => {\r\n                if (this.currentItem) {\r\n                    this.currentItem.photos?.push(photo);\r\n                    if (photo.isMain) this.currentItem.mainPhoto = photo.url;\r\n                }\r\n                this.uploading = false;\r\n            });\r\n        } catch(err) {\r\n            console.log(err);\r\n            this.uploading = false;\r\n        }\r\n\r\n    }\r\n\r\n    setMainPhoto = async (itemId: string, photo: Photo) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Inventory.setMainPhoto(itemId, photo.id);\r\n            runInAction(() => {    \r\n                if (this.currentItem && this.currentItem?.photos)\r\n                {\r\n                    this.currentItem.photos.find(p => p.isMain)!.isMain = false;\r\n                    this.currentItem.photos.find(p => p.id === photo.id)!.isMain = true;\r\n                    this.currentItem.mainPhoto = photo.url\r\n                    this.loading = false;\r\n                }\r\n            })\r\n\r\n        } catch(err) {\r\n            console.log(err);\r\n            this.loading = false;\r\n        }\r\n    }\r\n\r\n    deletePhoto = async (itemId: string, photo: Photo) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Inventory.deletePhoto(itemId, photo.id);\r\n            runInAction(() => {\r\n                if (this.currentItem && this.currentItem.photos) {\r\n                    this.currentItem.photos = this.currentItem.photos.filter(p => p.id !== photo.id);\r\n                }\r\n                this.loading = false;\r\n            })\r\n        } catch(err) {\r\n            console.log(err);\r\n            this.loading = false;\r\n        }\r\n    }\r\n}","import { makeAutoObservable, reaction, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { Pagination, PagingParams } from \"../models/pagination\";\r\nimport { Profile, ProfileOrder } from \"../models/profile\";\r\nimport { User, UserFormValues } from \"../models/user\";\r\nimport { store } from \"./store\";\r\nimport { history } from \"..\";\r\nimport { toast } from \"react-toastify\";\r\nimport { format } from \"date-fns\";\r\n\r\nexport class ProfileStore {\r\n    loading = false;\r\n    profileUser: User | null = null;\r\n    orderRegistry = new Map<string, ProfileOrder>();\r\n    profiles: Profile[] = [];\r\n    pagination: Pagination | null = null;\r\n    pagingParams = new PagingParams(1, 4);\r\n    orderFilters = new Map().set('all', true);\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n        reaction(\r\n            () => this.orderFilters.keys(),\r\n            () => {\r\n                this.pagingParams = new PagingParams(1,4);\r\n                this.orderRegistry.clear();\r\n                this.getProfile(this.profileUser!.username);\r\n            }\r\n        )\r\n    }\r\n\r\n    resetStore = () => {\r\n        this.pagingParams = new PagingParams(1,4);\r\n        this.orderRegistry.clear();\r\n        this.profileUser = null;\r\n        this.orderFilters.clear();\r\n        this.orderFilters.set('all', true);\r\n    }\r\n\r\n    get axiosParams() {\r\n        const params = new URLSearchParams();\r\n        params.append('pageNumber', this.pagingParams.pageNumber.toString());\r\n        params.append('pageSize', this.pagingParams.pageSize.toString());\r\n        this.orderFilters.forEach((value, key) => {\r\n            params.append(key, value);\r\n        });\r\n        return params;\r\n    }\r\n\r\n    get profileOrders() {\r\n        return Array.from(this.orderRegistry.values()).sort((a, b) => (\r\n            new Date(b.orderCreatedAt).getTime() - new Date(a.orderCreatedAt).getTime()\r\n        ));\r\n    }\r\n\r\n    setOrderFilter = (value: string) => {\r\n        const resetFilter = () => this.orderFilters.clear();\r\n        switch (value) {\r\n            case 'all':\r\n                resetFilter();\r\n                this.orderFilters.set('all', true);\r\n                break;\r\n            case 'isCompleted':\r\n                resetFilter();\r\n                this.orderFilters.set('isCompleted', true);\r\n                break;\r\n            case 'isInUse':\r\n                resetFilter();\r\n                this.orderFilters.set('isInUse', true);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    setPagingParams = (pagingParams: PagingParams) => {\r\n        this.pagingParams = pagingParams;\r\n    }\r\n\r\n    getProfile = async (username: string) => {\r\n        try {\r\n            this.loading = true;\r\n            const response = await agent.Profiles.getProfile(username, this.axiosParams);\r\n            const profile = response.data;\r\n            runInAction(() => {\r\n                this.profileUser = {\r\n                    displayName: profile.displayName,\r\n                    username: profile.username,\r\n                    email: profile.email\r\n                };\r\n                this.pagination = response.pagination;\r\n                profile.orders.forEach((order) => {\r\n                    order.orderCompletedAt = format(new Date(order.orderCompletedAt), 'dd MMM yyyy EEEE, p');\r\n                    order.orderCreatedAt = format(new Date(order.orderCreatedAt), 'dd MMM yyyy EEEE, p');\r\n                    this.orderRegistry.set(order.id, order);\r\n                });\r\n                this.loading = false;\r\n            }); \r\n        } catch(err) {\r\n            console.log(err);\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n    \r\n    updateUser = async (userForm: UserFormValues) => {\r\n        try {\r\n            this.loading = true;\r\n            userForm.password = 'placeholder';\r\n            const updatedUsername = await agent.Accounts.update(userForm, this.profileUser!.username);\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            });\r\n            history.push(`/profiles/${updatedUsername}`);\r\n            store.modalStore.closeModal();\r\n            toast.info('User updated', {autoClose: 1000});\r\n        } catch(err) {\r\n            console.log(err);\r\n            this.loading = false;\r\n        }\r\n    }\r\n}","import { makeAutoObservable, reaction, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { User, UserFormValues } from \"../models/user\";\r\nimport { history } from '../index';\r\nimport { store } from \"./store\";\r\nimport { Pagination, PagingParams } from \"../models/pagination\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nexport class UserStore {\r\n    currentUser: User | null = null;\r\n    userRegistry = new Map<string, User>();\r\n    pagination: Pagination | null = null;\r\n    pagingParams = new PagingParams();\r\n    loadingInitial = true;\r\n    loading = false;\r\n    searchString = '';\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n        reaction(\r\n            () => this.searchString,\r\n            () => {\r\n                this.pagingParams = new PagingParams();\r\n                this.userRegistry.clear();\r\n                this.getAllUsers();\r\n            }\r\n        )\r\n    }\r\n\r\n    get isLoggedIn() {\r\n        return !!this.currentUser;\r\n    }\r\n\r\n    get axiosParams() {\r\n        const params = new URLSearchParams();\r\n        params.append('pageNumber', this.pagingParams.pageNumber.toString());\r\n        params.append('pageSize', this.pagingParams.pageSize.toString());\r\n        params.append('searchString', this.searchString);\r\n        return params;\r\n    }\r\n\r\n    get userList() {\r\n        return Array.from(this.userRegistry.values());\r\n    }\r\n\r\n    setPagingParams = (pagingParams: PagingParams) => {\r\n        this.pagingParams = pagingParams;\r\n    }\r\n\r\n    setSearchString = (value: string) => {\r\n        this.searchString = value;\r\n    }\r\n\r\n    login = async (userForm: UserFormValues) => {\r\n        this.loading = true;\r\n        try {\r\n            const user = await agent.Accounts.login(userForm);\r\n            runInAction(() => {\r\n                this.currentUser = user;\r\n                this.loading = false;\r\n                localStorage.setItem('inventoryToken', this.currentUser.token!);\r\n                history.push('/dashboard');\r\n                store.modalStore.closeModal();\r\n            });\r\n        } catch(err) {\r\n            console.log(err);\r\n            this.loading = false;\r\n        }\r\n    }\r\n\r\n    register = async (userForm: UserFormValues) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Accounts.register(userForm);\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            });\r\n            history.push('/dashboard');\r\n            store.modalStore.closeModal();\r\n            toast.info('New User Created', {autoClose: 1000});\r\n            \r\n        } catch(err) {\r\n            console.log(err);\r\n            this.loading = false;\r\n        }\r\n    }\r\n\r\n    resetStore = () => {\r\n        this.userRegistry.clear();\r\n        this.pagination = null;\r\n        this.pagingParams = new PagingParams();\r\n        this.searchString = '';\r\n    }\r\n    \r\n    logout = () => {\r\n        this.currentUser = null;\r\n        localStorage.removeItem('inventoryToken');\r\n        store.orderStore.resetCart();\r\n        store.inventoryStore.resetStore();\r\n        this.resetStore();\r\n        history.push('/');\r\n    }\r\n\r\n    getCurrentUser = async () => {\r\n        try {\r\n            const user = await agent.Accounts.getCurrent();\r\n            runInAction(() => {\r\n                this.currentUser = user;\r\n            });\r\n        } catch(err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n    getAllUsers = async () => {\r\n        this.loadingInitial = true;\r\n        try {\r\n            const paginatedUsers = await agent.Accounts.getAll(this.axiosParams);\r\n            runInAction(() => {\r\n                paginatedUsers.data.forEach(user => {\r\n                    this.userRegistry.set(user.username, user);\r\n                });\r\n                this.pagination = paginatedUsers.pagination;\r\n                this.loadingInitial = false;\r\n            })\r\n        } catch(err) {\r\n            console.log(err);\r\n            this.loadingInitial = false;\r\n        }\r\n    }\r\n}","import { createContext, useContext } from \"react\";\r\nimport { InventoryStore } from \"./inventoryStore\";\r\nimport ModalStore from \"./modalStore\";\r\nimport { OrderStore } from \"./orderStore\";\r\nimport { ProfileStore } from \"./profileStore\";\r\nimport { UserStore } from \"./userStore\";\r\n\r\ninterface Store {\r\n    userStore: UserStore;\r\n    inventoryStore: InventoryStore;\r\n    orderStore: OrderStore;\r\n    profileStore: ProfileStore;\r\n    modalStore: ModalStore;\r\n}\r\n\r\nexport const store: Store = {\r\n    userStore: new UserStore(),\r\n    inventoryStore: new InventoryStore(),\r\n    orderStore: new OrderStore(),\r\n    profileStore: new ProfileStore(),\r\n    modalStore: new ModalStore()\r\n};\r\n\r\nexport const StoreContext = createContext(store);\r\n\r\nexport const useStore = () => {\r\n    return useContext(StoreContext);\r\n};","import { format } from \"date-fns\";\r\nimport { makeAutoObservable, runInAction } from \"mobx\"\r\nimport agent from \"../api/agent\";\r\nimport { CreateOrderDto } from \"../models/order\";\r\nimport { OrderItem, CreateOrderItemAPI } from \"../models/orderItem\";\r\nimport { ProfileOrder } from \"../models/profile\";\r\n\r\nexport class OrderStore {\r\n    cart: OrderItem[] = [];\r\n    loadingInitial = false;\r\n    loading = false;\r\n    currentOrder: ProfileOrder | null = null;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n    \r\n    addToCart = (orderItem: OrderItem) => {\r\n        for (let item of this.cart) {\r\n            if (item.product.id === orderItem.product.id) {\r\n                item.quantity += orderItem.quantity\r\n                this.saveCartToStorage();\r\n                return;\r\n            }\r\n        }\r\n        this.cart.push(orderItem);\r\n        this.saveCartToStorage();\r\n    }\r\n\r\n    removeFromCart = (index: number) => {\r\n        this.cart.splice(index, 1);\r\n        this.saveCartToStorage();\r\n    }\r\n    \r\n    placeOrder = async (notes: string) => {\r\n        this.loading = true;\r\n        const itemsToOrder = this.cart.map(item => this.mapItemToApi(item));\r\n        const order: CreateOrderDto = {\r\n            orderItems: itemsToOrder,\r\n            notes: notes\r\n        };\r\n        try {\r\n            await agent.Orders.createOrder(order);\r\n            runInAction(() => {\r\n                this.loading = false;\r\n                this.resetCart();\r\n            })\r\n        } catch(err) {\r\n            console.log(err);\r\n            this.loading = false;\r\n        }\r\n    }\r\n\r\n    getOrder = async (id: string) => {\r\n        try {\r\n            this.loadingInitial = true;\r\n            const order = await agent.Orders.getOrder(id);\r\n            order.orderCreatedAt = format(new Date(order.orderCreatedAt), 'dd MMM yyyy EEEE, p');\r\n            order.orderCompletedAt = format(new Date(order.orderCompletedAt), 'dd MMM yyyy EEEE, p');\r\n            runInAction(() => {\r\n                this.currentOrder = order;\r\n                this.loadingInitial = false;\r\n            });\r\n        } catch(err) {\r\n            console.log(err);\r\n            this.loadingInitial = false;\r\n        }\r\n\r\n    }\r\n\r\n    mapItemToApi = (item: OrderItem): CreateOrderItemAPI => {\r\n        return {\r\n            product: item.product.id,\r\n            quantity: item.quantity\r\n        };\r\n    }\r\n\r\n    saveCartToStorage = () => {\r\n        const json = JSON.stringify(this.cart);\r\n        localStorage.setItem('ssInventoryCart', json);\r\n    }\r\n\r\n    resetCart = () => {\r\n        this.cart = [];\r\n        localStorage.removeItem('ssInventoryCart');\r\n    }\r\n\r\n    setCart = () => {\r\n        const savedCart = localStorage.getItem('ssInventoryCart');\r\n        if (savedCart) this.cart = JSON.parse(savedCart);\r\n    }\r\n\r\n    editNotes = async (orderId: string,updatedNotes: string) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Orders.editNotes(orderId, updatedNotes);\r\n            runInAction(() => {\r\n                this.getOrder(orderId);\r\n                this.loading = false;\r\n            });\r\n        } catch(err) {\r\n            console.log(err);\r\n            this.loading = false;\r\n        }\r\n    }\r\n\r\n    toggleOrder = async (id: string) => {\r\n        try {\r\n            this.loading = true;\r\n            await agent.Orders.toggleOrder(id);\r\n            runInAction(() => {\r\n                this.getOrder(id);\r\n                this.loading = false;\r\n            });\r\n        } catch(err) {\r\n            console.log(err);\r\n            this.loading = false;\r\n        }\r\n        \r\n    }\r\n}","import { makeAutoObservable } from \"mobx\"\r\n\r\ninterface Modal {\r\n    open: boolean;\r\n    body: JSX.Element | null;\r\n}\r\n\r\nexport default class ModalStore {\r\n    modal: Modal = {\r\n        open: false,\r\n        body: null\r\n    }\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    openModal = (content: JSX.Element) => {\r\n        this.modal.open = true;\r\n        this.modal.body = content;\r\n    }\r\n\r\n    closeModal = () => {\r\n        this.modal.open = false;\r\n        this.modal.body = null;\r\n    }\r\n}","import { observer } from \"mobx-react-lite\"\r\nimport { ChangeEvent, Fragment, useEffect, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { toast } from \"react-toastify\";\r\nimport { Button, Grid, GridColumn, Header, Segment, SegmentGroup, Image, Form } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../stores/store\"\r\n\r\nexport default observer(function OrderCart() {\r\n    const { orderStore } = useStore();\r\n    const { cart, removeFromCart, placeOrder, setCart, loading } = orderStore;\r\n    const [orderNotes, setOrderNotes] = useState('');\r\n\r\n    function handleChange(e: ChangeEvent<HTMLTextAreaElement>) {\r\n        setOrderNotes(e.currentTarget.value);\r\n    }\r\n\r\n    function handleSubmit() {\r\n        placeOrder(orderNotes);\r\n    }\r\n\r\n    useEffect(() => {\r\n        setCart();\r\n    }, [setCart]);\r\n\r\n    return (\r\n        <Fragment>\r\n            <Header as=\"h1\" content=\"My Cart\" />\r\n            {\r\n                cart.length === 0 ? \r\n                <Fragment>\r\n                    <Header as='h3' content='No items in your cart.' />\r\n                    <Button as={Link} to='/dashboard' size='huge' content='Back to Items' color='facebook' />\r\n                </Fragment>\r\n                :\r\n                <Fragment>\r\n                    <Button as={Link} to='/dashboard' size='medium' content='Back to Items' color='grey' icon='arrow circle left'/>\r\n                    <Header as='h2' content='Notes' />\r\n                    <Form>\r\n                        <Form.TextArea name=\"notes\" value={orderNotes} onChange={handleChange} placeholder='Add any order notes here...' />\r\n                    </Form>\r\n                    <Header as='h2' content='Items' />\r\n                    <SegmentGroup>\r\n                    {   \r\n                        cart.map((orderItem, index) => (\r\n                            <Segment key={index}>\r\n                                <Grid doubling stackable>\r\n                                    <GridColumn width={2} verticalAlign='middle'>\r\n                                        <Image as={Link} to={`/items/${orderItem.product.id}`} src={orderItem.product.mainPhoto || '/assets/image-placeholder.jpg'} />\r\n                                    </GridColumn>\r\n                                    <GridColumn width={5} verticalAlign='middle'>\r\n                                        <Header content={orderItem.product.itemName} />\r\n                                        <p>{orderItem.product.itemDescription}</p>\r\n                                    </GridColumn>\r\n                                    <GridColumn width={5} textAlign='center' verticalAlign='middle'>\r\n                                        <p>{orderItem.quantity}</p>\r\n                                    </GridColumn>\r\n                                    <GridColumn width={4} verticalAlign='middle'>\r\n                                        <Button floated='right' \r\n                                            content=\"Remove from cart\" \r\n                                            onClick={() => {\r\n                                                removeFromCart(index);\r\n                                                toast.info('Removed from cart.', {autoClose:1500});\r\n                                            }}\r\n                                            negative />\r\n                                    </GridColumn>\r\n                                </Grid>\r\n                            </Segment>\r\n                        ))\r\n                    }\r\n                    </SegmentGroup>\r\n                    <Button loading={loading} size='huge' content='Checkout' color='facebook' onClick={handleSubmit}/>\r\n                </Fragment>\r\n            }\r\n            \r\n            \r\n        </Fragment>\r\n    )\r\n})","import { Dimmer, Loader } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    inverted?: boolean;\r\n    content?: string;\r\n}\r\n\r\nexport default function LoadingComponent({ inverted = true, content = \"Loading...\" }: Props) {\r\n    return (\r\n        <Dimmer active={true} inverted={inverted}>\r\n            <Loader>\r\n                {content}\r\n            </Loader>\r\n        </Dimmer>\r\n    );\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport { ChangeEvent, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { toast } from \"react-toastify\";\r\nimport { Card, CardContent, CardDescription, CardHeader, Form, Input, Image, CardMeta } from \"semantic-ui-react\";\r\nimport { InventoryItem } from \"../../models/inventoryItem\";\r\nimport { useStore } from \"../../stores/store\";\r\n\r\ninterface Props {\r\n    item: InventoryItem;\r\n}\r\n\r\nexport default observer(function ItemCard({ item }: Props) {\r\n    const [quantity, setQuantity] = useState<number>(0);\r\n    const { orderStore } = useStore();\r\n    const { addToCart } = orderStore;\r\n\r\n    function handleChange(e: ChangeEvent<HTMLInputElement>) {\r\n        setQuantity(e.currentTarget.valueAsNumber);\r\n    }\r\n\r\n    return (\r\n        <Card fluid>\r\n            <Image as={Link} to={`/items/${item.id}`} src={item.mainPhoto || '/assets/image-placeholder.jpg'} />\r\n            <CardContent>\r\n                <CardHeader \r\n                    as={Link} \r\n                    to={`/items/${item.id}`}\r\n                    style={{whiteSpace:'nowrap', overflow:'hidden', textOverflow:'ellipsis'}}\r\n                >\r\n                    {item.itemName}\r\n                </CardHeader>\r\n                <CardMeta>\r\n                    <p style={{whiteSpace:'nowrap', overflow:'hidden', textOverflow:'ellipsis'}}>{item.itemDescription ? item.itemDescription  : 'No description for this item.'}</p>\r\n                </CardMeta>\r\n                <CardDescription>\r\n                    <p><strong style={{color: 'green'}}>{item.availableStock}</strong>  Available</p>\r\n                    <p><strong>{item.totalStock}</strong>  Total Stock</p>\r\n                </CardDescription>\r\n            </CardContent>\r\n            <CardContent extra>\r\n                <Form style={{marginBottom: '-0.9em'}}>\r\n                    <Form.Group widths='equal'>\r\n                        <Form.Field width={6}>\r\n                            <Input \r\n                                placeholder=\"Amount\" \r\n                                type=\"number\" \r\n                                min=\"0\"\r\n                                step=\"1\"\r\n                                name=\"quantity\"\r\n                                value={quantity}\r\n                                onChange={handleChange}\r\n                            />\r\n                        </Form.Field>\r\n                        <Form.Button \r\n                            content='Add to Cart'\r\n                            color='facebook'\r\n                            width={10}\r\n                            fluid\r\n                            style={{height: '100%'}}\r\n                            onClick={() => {\r\n                                if (quantity > item.availableStock || quantity <= 0 || quantity % 1 !== 0) {\r\n                                    toast.error('Invalid quantity.', {autoClose: 2000});\r\n                                } else {\r\n                                    addToCart({product: item, quantity: quantity});\r\n                                    toast.info(`${quantity} ${item.itemName} added to cart.`, {autoClose: 2000});\r\n                                }\r\n                            }}\r\n                        />    \r\n                    </Form.Group>\r\n                </Form>\r\n            </CardContent>\r\n        </Card>\r\n    );\r\n});","import { observer } from \"mobx-react-lite\";\r\nimport { ChangeEvent, useState } from \"react\";\r\nimport { Button, Form, Header } from \"semantic-ui-react\";\r\nimport { InventoryItemFormValues } from \"../../models/inventoryItem\";\r\nimport { useStore } from \"../../stores/store\";\r\n\r\nexport default observer(function ItemForm() {\r\n    const initialState: InventoryItemFormValues = {\r\n        itemName: '',\r\n        itemDescription: '',\r\n        totalStock: '',\r\n        availableStock: ''\r\n    };\r\n    const [itemData, setItemData] = useState<InventoryItemFormValues>(initialState);\r\n    const { inventoryStore } = useStore();\r\n    const { createNew, loading } = inventoryStore;\r\n    \r\n    function handleChange(e: ChangeEvent<HTMLInputElement>) {\r\n        setItemData({ ...itemData, [e.currentTarget.name]: e.currentTarget.value});\r\n    }\r\n\r\n    function handleSubmit() {\r\n        createNew(itemData);\r\n        setItemData(initialState);\r\n    }\r\n\r\n    return (\r\n        <Form onSubmit={handleSubmit} style={{padding: '2em'}}>\r\n            <Header as='h1' content=\"Create New Item\" />\r\n            <Form.Input name=\"itemName\" value={itemData.itemName} label=\"Name\" onChange={handleChange} required />\r\n            <Form.Input name=\"itemDescription\" value={itemData.itemDescription} label=\"Description\" onChange={handleChange} />\r\n            <Form.Input name=\"totalStock\" value={itemData.totalStock} label=\"Total Stock\" onChange={handleChange} required />\r\n            <Form.Input name=\"availableStock\" value={itemData.availableStock} label=\"Available Stock\" onChange={handleChange} required />\r\n            <Button loading={loading} \r\n                fluid\r\n                size='large'\r\n                type=\"submit\" \r\n                content=\"Create Item\" \r\n                color='facebook' \r\n            />\r\n        </Form>\r\n    );\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport { ChangeEvent, Fragment, useEffect, useState } from \"react\";\r\nimport { Header, Grid, Loader, Form, Button } from \"semantic-ui-react\";\r\nimport InfiniteScroll from 'react-infinite-scroller';\r\nimport LoadingComponent from \"../../layout/LoadingComponent\";\r\nimport { PagingParams } from \"../../models/pagination\";\r\nimport { useStore } from \"../../stores/store\";\r\nimport ItemCard from \"./ItemCard\";\r\nimport ItemForm from \"./ItemForm\";\r\n\r\nexport default observer (function Dashboard() {\r\n    const { inventoryStore, userStore, modalStore } = useStore();\r\n    const { inventoryItems, \r\n        getAll, \r\n        loadingInitial, \r\n        setPagingParams, \r\n        pagination, \r\n        resetStore, \r\n        setSearchString, \r\n        searchString } = inventoryStore;\r\n    const [loadingNext, setLoadingNext] = useState(false);\r\n    const [search, setSearch] = useState('');\r\n\r\n    function handleGetNext() {\r\n        setLoadingNext(true);\r\n        setPagingParams(new PagingParams(pagination!.currentPage + 1, pagination?.itemsPerPage));\r\n        getAll().then(() => setLoadingNext(false));\r\n    }\r\n\r\n    function handleChange(e: ChangeEvent<HTMLInputElement>) {\r\n        setSearch(e.currentTarget.value);\r\n    }\r\n\r\n    function handleSubmit() {\r\n        setSearchString(search);\r\n    }\r\n\r\n    function handleBackToAll() {\r\n        setSearch('');\r\n        setSearchString('');\r\n    }\r\n\r\n    useEffect(() => {\r\n        resetStore();\r\n        getAll();\r\n    }, [getAll, userStore.currentUser, resetStore]);\r\n\r\n    if (loadingInitial && !loadingNext) return (<LoadingComponent content=\"Loading items...\" />)\r\n    return (\r\n        <Fragment>\r\n            <Header \r\n                as='h1' \r\n                content=\"All Items\" \r\n            />\r\n            {\r\n                userStore.currentUser?.role === \"admin\" && \r\n                <Button \r\n                content='Create new item'\r\n                color='facebook'\r\n                size='large'\r\n                style={{marginBottom: '1em'}}\r\n                onClick={() => modalStore.openModal(<ItemForm />)}\r\n            />\r\n            }\r\n            \r\n            {\r\n                searchString !== '' && \r\n                <Button content='Back to All' \r\n                    style={{marginBottom: '1em'}}\r\n                    icon='arrow circle left' \r\n                    color='grey' \r\n                    size='mini' \r\n                    onClick={handleBackToAll}\r\n                />\r\n            }\r\n            <Grid>\r\n                <Grid.Row> \r\n                    <Grid.Column width={16}>       \r\n                    <Form>   \r\n                        <Form.Group>          \r\n                            <Form.Input \r\n                                icon='search'\r\n                                iconPosition='left'\r\n                                placeholder='Search by Item Name...'\r\n                                fluid\r\n                                value={search}\r\n                                onChange={handleChange}\r\n                                width={12}\r\n                            /> \r\n                            <Form.Button \r\n                                content=\"Search\"\r\n                                fluid\r\n                                color='facebook'\r\n                                size='medium'\r\n                                onClick={handleSubmit}\r\n                                width={4}\r\n                            />\r\n                        </Form.Group>\r\n                    </Form>\r\n                    </Grid.Column>\r\n                </Grid.Row>\r\n                <Grid.Column width={16}>\r\n                    <InfiniteScroll\r\n                        pageStart={0}\r\n                        loadMore={handleGetNext}\r\n                        hasMore={!loadingNext && !!pagination && pagination.currentPage < pagination.totalPages}\r\n                        initialLoad={false}\r\n                    >\r\n                        <Grid columns={3} doubling stackable>\r\n                        {\r\n                            inventoryItems.map(item => (\r\n                                <Grid.Column key={item.id}>\r\n                                    <ItemCard item={item} />\r\n                                </Grid.Column>\r\n                                ))\r\n                        }\r\n                        </Grid>\r\n                    </InfiniteScroll>   \r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    <Loader  active={loadingNext} size='big' style={{marginTop: '1em', marginBottom: '5em'}} /> \r\n                </Grid.Column>\r\n            </Grid>\r\n        </Fragment>\r\n    );\r\n})","import { Cropper } from \"react-cropper\";\r\nimport 'cropperjs/dist/cropper.css';\r\n\r\ninterface Props {\r\n    imagePreview: string;\r\n    setCropper: (cropper: Cropper) => void;\r\n}\r\n\r\nexport default function PhotoWidgetCropper({ imagePreview, setCropper }: Props) {\r\n    return (\r\n        <Cropper \r\n            src={imagePreview}\r\n            style={{height: 200, width:'100%'}}\r\n            initialAspectRatio={1}\r\n            aspectRatio={1}\r\n            preview='.img-preview'\r\n            guides={false}\r\n            viewMode={1}\r\n            autoCropArea={1}\r\n            background={false}\r\n            onInitialized={setCropper}\r\n        />\r\n    )\r\n}","import { useCallback } from \"react\";\r\nimport { useDropzone } from \"react-dropzone\";\r\nimport { Header, Icon } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    setFiles: (files: any) => void;\r\n}\r\nexport default function PhotoWidgetDropzone({setFiles} : Props) {\r\n    const dzStyles = {\r\n        border: 'dashed 3px #eee',\r\n        borderColor: '#eee',\r\n        borderRadius: '5px',\r\n        paddingTop: '30px',\r\n        textAlign: 'center' as 'center',\r\n        height: 200\r\n    };\r\n\r\n    const dzActive = {\r\n        borderColor: 'green'\r\n    };\r\n\r\n    const onDrop = useCallback(acceptedFiles => {\r\n        setFiles(acceptedFiles.map((file: any) => Object.assign(file, {\r\n            preview: URL.createObjectURL(file)\r\n        })))\r\n    }, [setFiles]);\r\n    const { getRootProps, getInputProps, isDragActive } = useDropzone({onDrop});\r\n\r\n    return (\r\n        <div {...getRootProps()} style={isDragActive ? {...dzStyles, ...dzActive} : dzStyles}>\r\n            <input {...getInputProps()} />\r\n            <Icon name='upload' size='huge' />\r\n            <Header content='Drop image here' />\r\n        </div>\r\n    )\r\n}","import { Fragment, useEffect, useState } from \"react\";\r\nimport { Button, ButtonGroup, Grid, Header } from \"semantic-ui-react\";\r\nimport PhotoWidgetCropper from \"./PhotoWidgetCropper\";\r\nimport PhotoWidgetDropzone from \"./PhotoWidgetDropZone\";\r\n\r\ninterface Props {\r\n    loading: boolean;\r\n    uploadPhoto: (file: Blob) => void;\r\n}\r\n\r\nexport default function PhotoUploadWidget({loading, uploadPhoto}: Props) {\r\n    const [files, setFiles] = useState<any>([]);\r\n    const [cropper, setCropper] = useState<Cropper>()\r\n\r\n    function onCrop() {\r\n        if (cropper) {\r\n            cropper.getCroppedCanvas().toBlob(blob => uploadPhoto(blob!));\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            files.forEach((file: any) => URL.revokeObjectURL(file.preview));\r\n        }\r\n    }, [files]);\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={4}>\r\n                <Header sub content='Step 1 - Add Photo' />\r\n                <PhotoWidgetDropzone setFiles={setFiles} />\r\n            </Grid.Column>\r\n            <Grid.Column width={1} />\r\n            <Grid.Column width={4} >\r\n                <Header sub content='Step 2 - Resize Image' />\r\n                {\r\n                    files && files.length > 0 && (\r\n                        <PhotoWidgetCropper setCropper={setCropper} imagePreview={files[0].preview} />\r\n                    )\r\n                }\r\n            </Grid.Column>\r\n            <Grid.Column width={1} />\r\n            <Grid.Column width={4}>\r\n                <Header sub content='Step 3 - Preview and Upload' />\r\n                {\r\n                    files && files.length > 0 && \r\n                    <Fragment>\r\n                        <div className='img-preview' style={{minHeight: 200, overflow:'hidden'}} />\r\n                        <ButtonGroup widths={2}>\r\n                            <Button loading={loading} onClick={onCrop} positive icon='check' />\r\n                            <Button disabled={loading} onClick={() => setFiles([])} icon='close' />\r\n                        </ButtonGroup>\r\n                    </Fragment>\r\n                }\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport { ChangeEvent, useState } from \"react\";\r\nimport { Button, Form, Header } from \"semantic-ui-react\";\r\nimport { InventoryItemFormValues } from \"../../models/inventoryItem\";\r\nimport { useStore } from \"../../stores/store\";\r\n\r\nexport default observer(function EditItemForm(item: InventoryItemFormValues) {\r\n    const initialState = item;\r\n    const [itemData, setItemData] = useState<InventoryItemFormValues>(initialState);\r\n    const { inventoryStore } = useStore();\r\n    const { updateItem, loading } = inventoryStore;\r\n    \r\n    function handleChange(e: ChangeEvent<HTMLInputElement>) {\r\n        setItemData({ ...itemData, [e.currentTarget.name]: e.currentTarget.value});\r\n    }\r\n\r\n    function handleSubmit() {\r\n        updateItem(itemData);\r\n    }\r\n\r\n    return (\r\n        <Form onSubmit={handleSubmit} style={{padding: '2em'}}>\r\n            <Header as='h1' content=\"Edit Item Details\" />\r\n            <Form.Input name=\"itemName\" value={itemData.itemName} label=\"Name\" onChange={handleChange} required />\r\n            <Form.Input name=\"itemDescription\" value={itemData.itemDescription} label=\"Description\" onChange={handleChange} />\r\n            <Form.Input name=\"totalStock\" value={itemData.totalStock} label=\"Total Stock\" onChange={handleChange} required />\r\n            <Form.Input name=\"availableStock\" value={itemData.availableStock} label=\"Available Stock\" onChange={handleChange} required />\r\n            <Button loading={loading} \r\n                fluid\r\n                size='large'\r\n                type=\"submit\" \r\n                content=\"Update\" \r\n                color='facebook' \r\n            />\r\n        </Form>\r\n    );\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport { Fragment, SyntheticEvent, useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button, ButtonGroup, Card, Header, Image } from \"semantic-ui-react\";\r\nimport LoadingComponent from \"../../layout/LoadingComponent\";\r\nimport Photo from \"../../models/photo\";\r\nimport { useStore } from \"../../stores/store\";\r\nimport PhotoUploadWidget from \"../photos/PhotoUploadWidget\";\r\nimport EditItemForm from \"./EditItemForm\";\r\n\r\nexport default observer(function ItemDetails() {\r\n    const {id} = useParams<{id: string}>();\r\n    const { inventoryStore, modalStore, userStore } = useStore();\r\n    const { getDetails, currentItem, loadingInitial, loading, setMainPhoto, deletePhoto, uploadPhoto, uploading } = inventoryStore;\r\n    const [addPhotoMode, setAddPhotoMode] = useState(false);\r\n    const [target, setTarget] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n        getDetails(id);\r\n    }, [getDetails, id]);\r\n\r\n    function handleSetMainPhoto(e: SyntheticEvent<HTMLButtonElement>, photo: Photo) {\r\n        setTarget(e.currentTarget.name)\r\n        setMainPhoto(currentItem!.id, photo);\r\n    }\r\n\r\n    function handleDeletePhoto(e: SyntheticEvent<HTMLButtonElement>, photo: Photo) {\r\n        setTarget(e.currentTarget.name);\r\n        deletePhoto(currentItem!.id, photo);\r\n    }\r\n\r\n    function handlePhotoUpload(file: Blob) {\r\n        uploadPhoto(file, currentItem!.id).then(() => setAddPhotoMode(false));\r\n    }\r\n\r\n    if (loadingInitial || currentItem === null) return (<LoadingComponent content='Loading Item...' />);\r\n    return (\r\n        <Fragment>\r\n            <Image src={currentItem?.mainPhoto || '/assets/image-placeholder.jpg'} \r\n                floated='right' \r\n                size='medium' \r\n            />\r\n            <Button as={Link} to='/dashboard' size='medium' content='Back to Items' color='grey' icon='arrow circle left'/>\r\n            <Header as='h1' content={currentItem?.itemName}  />\r\n            {\r\n                userStore.currentUser?.role === \"admin\" && \r\n                <Button\r\n                    content='Edit Item Details'\r\n                    color='facebook'\r\n                    size='large'\r\n                    style={{marginBottom: '1em'}}\r\n                    onClick={() => modalStore.openModal(\r\n                        <EditItemForm \r\n                            id={currentItem.id}\r\n                            itemName={currentItem.itemName}\r\n                            itemDescription={currentItem.itemDescription}\r\n                            totalStock={currentItem.totalStock.toString()}\r\n                            availableStock={currentItem.availableStock.toString()}\r\n                        />\r\n                    )}\r\n                />\r\n            }\r\n            \r\n            <p>{currentItem?.itemDescription ? currentItem.itemDescription : \"No description yet.\"}</p>\r\n            \r\n            <Header as='h2' content='Stock' />\r\n            <p><strong>Total: </strong>{currentItem?.totalStock}</p>\r\n            <p><strong>Available: </strong>{currentItem?.availableStock}</p>\r\n\r\n            \r\n                <Header as='h2' content='Photos' style={{display: 'inline-block'}} />\r\n                <Button \r\n                    circular \r\n                    icon={addPhotoMode ? 'close' : 'add'}\r\n                    content={addPhotoMode ? 'Cancel' : 'Add'}\r\n                    onClick={() => setAddPhotoMode(!addPhotoMode)} \r\n                    style={{marginLeft: '1em'}}\r\n                    size='tiny'\r\n                />\r\n            \r\n            { \r\n                addPhotoMode ? <PhotoUploadWidget uploadPhoto={handlePhotoUpload} loading={uploading} /> :\r\n                !currentItem!.photos || currentItem!.photos.length === 0 ? \r\n                <p>No photos yet.</p> :\r\n                <Card.Group itemsPerRow={4}>\r\n                    {currentItem?.photos?.map((photo, index) => (\r\n                       <Card key={index}>\r\n                           <Image src={photo.url} />\r\n                           <ButtonGroup widths='4'>\r\n                                <Button \r\n                                    name={'main' + photo.id}\r\n                                    onClick={e => handleSetMainPhoto(e, photo)}\r\n                                    content='Set Main' \r\n                                    color='facebook' \r\n                                    disabled={photo.isMain}\r\n                                    loading={loading && target=== 'main' + photo.id} />\r\n                                <Button \r\n                                    icon='trash'\r\n                                    name={'delete' + photo.id} \r\n                                    color='google plus' \r\n                                    onClick={e => handleDeletePhoto(e, photo)}\r\n                                    loading={loading && target === 'delete' + photo.id}\r\n                                />\r\n                           </ButtonGroup>\r\n                       </Card>\r\n                    ))}\r\n                </Card.Group>\r\n            }\r\n            \r\n\r\n            {/* <Header as='h2' content='Orders'  />\r\n            <p>To be implemented</p> */}\r\n        </Fragment>\r\n    );\r\n});","import { observer } from \"mobx-react-lite\";\r\nimport { ChangeEvent, Fragment, useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { toast } from \"react-toastify\";\r\nimport { Header, Table, Image, Button, Form } from \"semantic-ui-react\";\r\nimport LoadingComponent from \"../../layout/LoadingComponent\";\r\nimport { useStore } from \"../../stores/store\";\r\n\r\nexport default observer(function OrderDetails() {\r\n    const { orderId } = useParams<{orderId: string}>();\r\n    const { orderStore, userStore } = useStore();\r\n    const { getOrder, currentOrder, loading, loadingInitial, toggleOrder, editNotes } = orderStore;\r\n    const [orderNotes, setOrderNotes] = useState(\"\");\r\n    const [editMode, setEditMode] = useState(false);\r\n    useEffect(() => {\r\n        getOrder(orderId);\r\n        setEditMode(false);\r\n        setOrderNotes(currentOrder?.notes ? currentOrder.notes : \"\");\r\n    },[getOrder, orderId, currentOrder?.notes]);\r\n\r\n    function handleChange(e: ChangeEvent<HTMLTextAreaElement>) {\r\n        setOrderNotes(e.currentTarget.value);\r\n    }\r\n\r\n    function handleSubmit() {\r\n        editNotes(orderId, orderNotes);\r\n    }\r\n\r\n    if (currentOrder === null || loadingInitial) return <LoadingComponent content=\"Loading Order Details...\" />\r\n    return (\r\n        <Fragment>\r\n            <Header as='h1' content={currentOrder.id} />\r\n            <Button as={Link} to={`/profiles/${userStore.currentUser?.username}`} size='medium' content='Back to Orders' color='grey' icon='arrow circle left'/>\r\n            <Header as='h2' content={currentOrder.orderStatus} \r\n                color={currentOrder.orderStatus === 'Completed' ? 'green' : 'red'} \r\n            />\r\n            <p><strong>Order Placed At: </strong>{currentOrder.orderCreatedAt}</p>\r\n            \r\n            {\r\n                currentOrder.orderStatus === 'Completed' ? \r\n                <p><strong>Order Completed At: </strong>{currentOrder.orderCompletedAt}</p> :\r\n                <Button content='Complete Order' \r\n                    loading={loading}\r\n                    color='facebook' \r\n                    size='large' \r\n                    onClick={() => {\r\n                        toggleOrder(orderId);\r\n                        toast.info('Order completed.', {autoClose: 1000});\r\n                    }}\r\n                />\r\n            }\r\n            <Header as='h2' content='Notes' />\r\n            {\r\n                editMode ? \r\n                <Form>\r\n                    <Form.TextArea placeholder=\"Type order notes here...\" rows={4} value={orderNotes} onChange={handleChange} />\r\n                    <Button content='Close' color='grey' \r\n                        onClick={() => setEditMode(false)}\r\n                    />\r\n                    <Button type='submit' content='Submit' color='facebook' onClick={handleSubmit} loading={loading} />\r\n                </Form> :\r\n                <Fragment>\r\n                    <p>{currentOrder.notes}</p>\r\n                    <Button color='facebook' content='Edit Notes' \r\n                        onClick={() => setEditMode(true)}\r\n                    />\r\n                </Fragment>\r\n            }\r\n            <Header as='h2' content='Items' />\r\n            <Table size='large'>\r\n                <Table.Header>\r\n                    <Table.Row>\r\n                        <Table.HeaderCell width={2}></Table.HeaderCell>\r\n                        <Table.HeaderCell width={3}>Name</Table.HeaderCell>\r\n                        <Table.HeaderCell width={9}>Description</Table.HeaderCell>\r\n                        <Table.HeaderCell width={2} textAlign='center'>Quantity</Table.HeaderCell>\r\n                    </Table.Row>\r\n                </Table.Header>\r\n                <Table.Body>\r\n                    {\r\n                        currentOrder.orderItems.map((orderItem, index) => (\r\n                            <Table.Row key={index}>\r\n                                <Table.Cell><Image src={orderItem.product.mainPhoto || '/assets/image-placeholder.jpg'} size='tiny' /></Table.Cell>\r\n                                <Table.Cell>{<Link to={`/items/${orderItem.product.id}`}>{orderItem.product.itemName}</Link>}</Table.Cell>\r\n                                <Table.Cell>{orderItem.product.itemDescription}</Table.Cell>\r\n                                <Table.Cell textAlign='center'>{orderItem.quantity}</Table.Cell>\r\n                            </Table.Row>\r\n                        ))\r\n                    }\r\n                </Table.Body>\r\n            </Table>\r\n        </Fragment>\r\n    );\r\n});","import { observer } from \"mobx-react-lite\";\r\nimport { ChangeEvent, useState } from \"react\";\r\nimport { Button, Form, Header } from \"semantic-ui-react\";\r\nimport { UserFormValues } from \"../../models/user\";\r\nimport { useStore } from \"../../stores/store\";\r\n\r\ninterface Props {\r\n    email: string;\r\n    username: string;\r\n    displayName: string;\r\n}\r\n\r\nexport default observer(function ProfileDetailsForm(user: Props) {\r\n    const { profileStore } = useStore();\r\n    const { updateUser } = profileStore;\r\n    const initialState: UserFormValues = {\r\n        username: user.username,\r\n        displayName: user.displayName,\r\n        email: user.email\r\n    };\r\n    const [formData, setFormData] = useState<UserFormValues>(initialState);\r\n\r\n    function handleChange(e: ChangeEvent<HTMLInputElement>) {\r\n        setFormData({...formData, [e.currentTarget.name]: e.currentTarget.value});\r\n    }\r\n\r\n    function handleSubmit() {\r\n        updateUser(formData);\r\n        setFormData(initialState);\r\n    }\r\n\r\n    return (\r\n        <Form onSubmit={handleSubmit} style={{padding: '2em'}}>\r\n            <Header as='h1' content='Edit User Details' />\r\n            <Form.Input name=\"email\" value={formData.email} label=\"E-mail\" onChange={handleChange} required/>\r\n            <Form.Input name=\"displayName\" value={formData.displayName} label=\"Display Name\" onChange={handleChange} required/>\r\n            <Form.Input name=\"username\" value={formData.username} label=\"Username\" onChange={handleChange} required/>\r\n            <Button type=\"submit\" content=\"Update\" size='large' color=\"facebook\" fluid/>\r\n        </Form>     \r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport { Fragment } from \"react\";\r\nimport { Header, Menu } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../stores/store\";\r\n\r\nexport default observer(function ProfileOrderFilters() {\r\n    const { profileStore } = useStore();\r\n    const { orderFilters, setOrderFilter } = profileStore;\r\n    \r\n    return (\r\n        <Fragment>\r\n            <Menu vertical fluid>\r\n                <Header icon='filter' attached content='Filters'/>\r\n                <Menu.Item\r\n                    content='All Orders'\r\n                    active={orderFilters.has('all')}\r\n                    onClick={() => setOrderFilter('all')}\r\n                    />\r\n                <Menu.Item\r\n                    content='Completed'\r\n                    active={orderFilters.has('isCompleted')}\r\n                    onClick={() => setOrderFilter('isCompleted')} \r\n                    />\r\n                <Menu.Item\r\n                    content='In Use'\r\n                    active={orderFilters.has('isInUse')}\r\n                    onClick={() => setOrderFilter('isInUse')}\r\n                    />\r\n            </Menu>\r\n        </Fragment>\r\n    )\r\n});","import { observer } from \"mobx-react-lite\";\r\nimport { Fragment, useEffect, useState } from \"react\";\r\nimport InfiniteScroll from \"react-infinite-scroller\";\r\nimport { useParams } from \"react-router\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button, Grid, Header, Label, Loader, Segment } from \"semantic-ui-react\";\r\nimport LoadingComponent from \"../../layout/LoadingComponent\";\r\nimport { PagingParams } from \"../../models/pagination\";\r\nimport { useStore } from \"../../stores/store\";\r\nimport ProfileDetailsForm from \"./ProfileDetailsForm\";\r\nimport ProfileOrderFilters from \"./ProfileOrderFilters\";\r\n\r\nexport default observer(function Profile() {\r\n    const { username } = useParams<{username: string}>();\r\n    const [loadingNext, setLoadingNext] = useState(false);\r\n    const { profileStore, modalStore, userStore } = useStore();\r\n    const { \r\n        getProfile, \r\n        profileUser,\r\n        profileOrders,\r\n        loading, \r\n        setPagingParams, \r\n        pagination, \r\n        resetStore \r\n    } = profileStore;\r\n    \r\n    useEffect(() => {\r\n        resetStore();\r\n        getProfile(username);\r\n    }, [getProfile, username, resetStore]);\r\n\r\n    function handleGetNext() {\r\n        setLoadingNext(true);\r\n        setPagingParams(new PagingParams(pagination!.currentPage + 1, pagination?.itemsPerPage));\r\n        getProfile(username).then(() => setLoadingNext(false));\r\n    }\r\n\r\n    if (profileUser == null || (loading && !loadingNext)) return <LoadingComponent content='Loading Profile...' />\r\n    return (\r\n        <Fragment>\r\n            <Header as='h1' content={profileUser.displayName} />\r\n            <Header as='h2' content='Details' />\r\n            <Fragment>\r\n                <p><strong>E-mail: </strong>{profileUser.email}</p>\r\n                <p><strong>Username: </strong>{profileUser.username}</p>\r\n                <p><strong>Display Name: </strong>{profileUser.displayName}</p>\r\n                {\r\n                    userStore.currentUser?.role === \"admin\" && \r\n                    <Button \r\n                        content='Edit Details' \r\n                        color='facebook' \r\n                        onClick={() => modalStore.openModal(\r\n                            <ProfileDetailsForm \r\n                                email={profileUser.email} \r\n                                displayName={profileUser.displayName}\r\n                                username={profileUser.username}\r\n                            />\r\n                            )\r\n                        }\r\n                    />\r\n                }\r\n                \r\n            </Fragment>\r\n            \r\n            <Header as='h2' content='My Orders' />\r\n            <Grid>\r\n                <Grid.Column width={11}>\r\n                    {profileOrders.length >= 1 ?\r\n                    <InfiniteScroll\r\n                        pageStart={0}\r\n                        loadMore={handleGetNext}\r\n                        hasMore={!loadingNext && !!pagination && pagination?.currentPage < pagination?.totalPages}\r\n                        initialLoad={false}\r\n                    >\r\n                        <Segment.Group>\r\n                        {\r\n                            profileOrders.map((order, index) => (\r\n                                <Segment key={index}>\r\n                                    <Header as={Link} to={`/orders/${order.id}`} content={order.id} style={{display:'block', marginBottom: '0.3em'}}/>\r\n                                    {order.orderStatus === 'Completed' ? \r\n                                        <Label color='green' content='Completed' style={{marginBottom:'1em'}} /> : \r\n                                        <Label color='red' content='In Use' style={{marginBottom:'1em'}}/>}\r\n                                    <p><strong>Created at:</strong> {order.orderCreatedAt}</p>\r\n                                    {order.orderStatus === 'Completed' && <p><strong>Completed at:</strong> {order.orderCompletedAt}</p>}\r\n                                    <Button \r\n                                        as={Link}\r\n                                        to={`/orders/${order.id}`}\r\n                                        color='facebook' \r\n                                        content='View Order' \r\n                                        size='large' \r\n                                        fluid />\r\n                                </Segment>\r\n                            ))\r\n                        }\r\n                        </Segment.Group>\r\n                    </InfiniteScroll> : <Header content='No orders.' />\r\n                    } \r\n                    \r\n                </Grid.Column>\r\n                <Grid.Column width={5}>\r\n                    <ProfileOrderFilters />\r\n                </Grid.Column>\r\n                <Grid.Column width={11}>\r\n                    <Loader active={loadingNext} inverted size='large'/>\r\n                </Grid.Column>\r\n            </Grid>\r\n            \r\n        </Fragment>\r\n    );\r\n});","import { observer } from \"mobx-react-lite\";\r\nimport { ChangeEvent, useState } from \"react\";\r\nimport { Button, Form, Header } from \"semantic-ui-react\";\r\nimport { UserFormValues } from \"../../models/user\";\r\nimport { useStore } from \"../../stores/store\";\r\n\r\nexport default observer(function LoginForm() {\r\n\r\n    const { userStore } = useStore();\r\n    const { login, loading } = userStore;\r\n    const initialState: UserFormValues = {\r\n        email: '',\r\n        password: ''\r\n    };\r\n    const [loginData, setLoginData] = useState<UserFormValues>(initialState);\r\n\r\n    function handleChange(e: ChangeEvent<HTMLInputElement>) {\r\n        setLoginData({...loginData, [e.currentTarget.name]: e.currentTarget.value});\r\n    }\r\n\r\n    function handleSubmit() {\r\n        login(loginData);\r\n        setLoginData(initialState);\r\n    }\r\n\r\n    return (\r\n        <Form style={{padding: '2em'}} onSubmit={handleSubmit}>\r\n            <Header as='h2' content='Login' />\r\n            <Form.Input name=\"email\" value={loginData.email} label=\"E-mail\" onChange={handleChange} required/>\r\n            <Form.Input name=\"password\" type=\"password\" value={loginData.password} label=\"Password\" onChange={handleChange} required/>\r\n            <Button fluid loading={loading} type=\"submit\" content=\"Login\" positive />\r\n        </Form>\r\n    )\r\n});","import { observer } from \"mobx-react-lite\";\r\nimport { Fragment } from \"react\";\r\nimport { Link, Redirect } from \"react-router-dom\";\r\nimport { Container, Header, Segment, Button, Icon } from \"semantic-ui-react\";\r\nimport LoginForm from \"../features/accounts/LoginForm\";\r\nimport { useStore } from \"../stores/store\";\r\n\r\nexport default observer(function LandingPage() {\r\n    const { userStore, modalStore } = useStore();\r\n    const { isLoggedIn } = userStore;\r\n    const landingStyle = {\r\n        display: 'flex',\r\n        height: '100vh',\r\n        alignItems: 'center',\r\n        // backgroundImage: \"linear-gradient(135deg,rgb(24, 42, 115) 0%,rgb(33, 138, 174) 69%,rgb(32, 167, 172) 89%)\"\r\n        backgroundImage: \"linear-gradient(to right bottom, rgb(41, 152, 255), rgb(86, 67, 250))\"\r\n    };\r\n    if (isLoggedIn) return <Redirect to='/dashboard'/>\r\n    return (\r\n        <Segment vertical textAlign='center' style={landingStyle}>\r\n            <Container>\r\n                <Header as='h1' inverted style={{fontSize: '3.5em'}}>\r\n                    {/* <Image centered src='/assets/CompanyLogo.png' size='large' style={{marginBottom: 12}} /> */}\r\n                    <Icon name='warehouse' size='large' style={{marginRight: '0.4em'}} />\r\n                    Inventory Application\r\n                </Header>\r\n                <Header as='h2' inverted content='Welcome!' style={{fontSize: '2em'}}/>\r\n                {\r\n                    isLoggedIn ? \r\n                    <Fragment>\r\n                        <Button size='big' inverted as={Link} to='/dashboard' content='Go to Inventory' />\r\n                    </Fragment> :\r\n                    <Fragment>\r\n                        <Button size='big' inverted onClick={() => modalStore.openModal(<LoginForm />)} >\r\n                            Login\r\n                        </Button>\r\n                    </Fragment>\r\n                }              \r\n            </Container>\r\n        </Segment>\r\n        \r\n    )\r\n});","import { observer } from \"mobx-react-lite\";\r\nimport { Fragment } from \"react\";\r\nimport { Link, NavLink } from \"react-router-dom\";\r\nimport { Container, Dropdown, DropdownItem, DropdownMenu, Menu, MenuItem } from \"semantic-ui-react\";\r\nimport { useStore } from \"../stores/store\";\r\n\r\nexport default observer(function NavBar() {\r\n    const { userStore } = useStore();\r\n    const { isLoggedIn, logout, currentUser } = userStore;\r\n    return (\r\n        <Menu fixed='top' inverted>\r\n            <Container>\r\n                <MenuItem exact as={NavLink} to=\"/\" content=\"Home\"/>\r\n                <MenuItem as={NavLink} to=\"/dashboard\" content=\"Inventory\"/>\r\n                {\r\n                    currentUser?.role === 'admin' && <MenuItem as={NavLink} to=\"/users\" content=\"Users\"/>\r\n                }\r\n                {\r\n                    isLoggedIn && \r\n                    <Fragment>\r\n                        <MenuItem as={NavLink} to=\"/cart\" content=\"My Cart\" position='right' icon='cart' />\r\n                        <MenuItem>\r\n                            <Dropdown pointing='top right' text={`Welcome, ${currentUser?.displayName}`}>\r\n                                <DropdownMenu>\r\n                                    <DropdownItem\r\n                                        icon='user'\r\n                                        text='My Profile'\r\n                                        as={Link}\r\n                                        to={`/profiles/${currentUser?.username}`} \r\n                                    />\r\n                                    <DropdownItem \r\n                                        text=\"Logout\"\r\n                                        onClick={logout}\r\n                                        icon='sign-out' \r\n                                    />\r\n                                </DropdownMenu>\r\n                            </Dropdown>\r\n                        </MenuItem>\r\n                    </Fragment>\r\n                }\r\n            </Container>\r\n        </Menu>\r\n    );\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport { ChangeEvent, useState } from \"react\";\r\nimport { Button, Form, Header } from \"semantic-ui-react\";\r\nimport { UserFormValues } from \"../../models/user\";\r\nimport { useStore } from \"../../stores/store\";\r\n\r\nexport default observer(function RegisterForm() {\r\n    const { userStore } = useStore();\r\n    const { register } = userStore;\r\n    const initialState: UserFormValues = {\r\n        username: '',\r\n        displayName: '',\r\n        email: '',\r\n        password: ''\r\n    };\r\n    const [registerData, setregisterData] = useState<UserFormValues>(initialState);\r\n\r\n    function handleChange(e: ChangeEvent<HTMLInputElement>) {\r\n        setregisterData({...registerData, [e.currentTarget.name]: e.currentTarget.value});\r\n    }\r\n\r\n    function handleSubmit() {\r\n        register(registerData);\r\n        setregisterData(initialState);\r\n    }\r\n\r\n    return (\r\n        <Form onSubmit={handleSubmit} style={{padding: '2em'}}>\r\n            <Header as='h1' content='Register New User' />\r\n            <Form.Input name=\"email\" value={registerData.email} label=\"E-mail\" onChange={handleChange} required/>\r\n            <Form.Input name=\"displayName\" value={registerData.displayName} label=\"Display Name\" onChange={handleChange} required/>\r\n            <Form.Input name=\"username\" value={registerData.username} label=\"Username\" onChange={handleChange} required/>\r\n            <Form.Input name=\"password\" type=\"password\" value={registerData.password} label=\"Password\" onChange={handleChange} required/>\r\n            <Button type=\"submit\" content=\"Register\" size='large' color=\"facebook\" fluid/>\r\n        </Form>     \r\n    )\r\n});","import { observer } from \"mobx-react-lite\";\r\nimport { ChangeEvent, Fragment, useEffect, useState } from \"react\";\r\nimport InfiniteScroll from \"react-infinite-scroller\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button, Form, Grid, GridColumn, Header, Loader, Segment } from \"semantic-ui-react\";\r\nimport LoadingComponent from \"../../layout/LoadingComponent\";\r\nimport { PagingParams } from \"../../models/pagination\";\r\nimport { useStore } from \"../../stores/store\";\r\nimport RegisterForm from \"./RegisterForm\";\r\n\r\nexport default observer(function UserList() {\r\n    const {userStore, modalStore} = useStore();\r\n    const {\r\n        getAllUsers, \r\n        userList,\r\n        setPagingParams, \r\n        pagination,\r\n        loadingInitial,\r\n        resetStore,\r\n        searchString,\r\n        setSearchString\r\n    } = userStore;\r\n    const [loadingNext, setLoadingNext] = useState(false);\r\n    const [search, setSearch] = useState('');\r\n\r\n    function handleGetNext() {\r\n        setLoadingNext(true);\r\n        setPagingParams(new PagingParams(pagination!.currentPage + 1, pagination!.itemsPerPage));\r\n        getAllUsers().then(() => setLoadingNext(false));\r\n    }\r\n\r\n    function handleChange(e: ChangeEvent<HTMLInputElement>) {\r\n        setSearch(e.currentTarget.value);\r\n    } \r\n\r\n    function handleSubmit() {\r\n        setSearchString(search);\r\n    }\r\n\r\n    function handleBackToAll() {\r\n        setSearch('');\r\n        setSearchString('');\r\n    }\r\n\r\n    useEffect(() => {\r\n        resetStore();\r\n        getAllUsers();\r\n    }, [getAllUsers, resetStore]);\r\n\r\n    if (loadingInitial && !loadingNext) return (<LoadingComponent content=\"Loading users...\" />);\r\n    return (\r\n        <Fragment>\r\n            <Header as='h1' content='Users' />\r\n            <Button \r\n                content='Create new user' \r\n                color='facebook'\r\n                size='large'\r\n                style={{marginBottom: '1em'}}\r\n                onClick={() => modalStore.openModal(<RegisterForm />)}\r\n            />\r\n            {\r\n                searchString !== '' &&\r\n                <Button content='Back to All'\r\n                    style={{marginBottom:'1em'}}\r\n                    icon='arrow circle left'\r\n                    color='grey'\r\n                    size='mini'\r\n                    onClick={handleBackToAll}\r\n                />\r\n            }\r\n            <Grid>\r\n                <Grid.Row>\r\n                    <Grid.Column width={16}>\r\n                        <Form>\r\n                        <Form.Group>\r\n                            <Form.Input\r\n                                icon='search'\r\n                                iconPosition='left'\r\n                                placeholder='Search by Name...'\r\n                                fluid\r\n                                value={search}\r\n                                onChange={handleChange}\r\n                                width={12}\r\n                            />\r\n                            <Form.Button\r\n                                content='Search'\r\n                                fluid\r\n                                color='facebook'\r\n                                size='medium'\r\n                                onClick={handleSubmit}\r\n                                width={4}\r\n                            />\r\n                        </Form.Group>\r\n                        </Form>\r\n                    </Grid.Column>\r\n                </Grid.Row>\r\n                <GridColumn width={16}>\r\n                    <InfiniteScroll\r\n                        pageStart={0}\r\n                        loadMore={handleGetNext}\r\n                        hasMore={!loadingNext && !!pagination && pagination.currentPage < pagination.totalPages}\r\n                        initialLoad={false}\r\n                    >\r\n                        <Segment.Group>\r\n                            {\r\n                                userList.map((user, index) => (\r\n                                    <Segment key={index}>\r\n                                        <Header \r\n                                            content={user.displayName}\r\n                                            as={Link}\r\n                                            to={`/profiles/${user.username}`}\r\n                                        />\r\n                                        <p><strong>E-mail: </strong>{user.email}</p>\r\n                                        <p><strong>Username: </strong>{user.username}</p>\r\n                                        <Button \r\n                                            content=\"Go to Profile\" \r\n                                            as={Link}\r\n                                            to={`/profiles/${user.username}`}\r\n                                            color='facebook'\r\n                                            size=\"large\"\r\n                                            fluid\r\n                                        />\r\n                                    </Segment> \r\n                                ))\r\n                            }\r\n                        </Segment.Group>\r\n                    </InfiniteScroll>\r\n                </GridColumn>\r\n                <GridColumn width={16}>\r\n                    <Loader active={loadingNext} size='big' style={{marginTop: '1em'}} />\r\n                </GridColumn>\r\n            </Grid>\r\n            \r\n        </Fragment>\r\n    );\r\n});","import { observer } from \"mobx-react-lite\";\r\nimport { Modal } from \"semantic-ui-react\";\r\nimport { useStore } from \"../stores/store\";\r\n\r\nexport default observer(function ModalContainer() {\r\n    const {modalStore} = useStore();\r\n    return (\r\n        <Modal\r\n            open={modalStore.modal.open}\r\n            onClose={modalStore.closeModal}\r\n            size=\"mini\"\r\n        >\r\n            {modalStore.modal.body}\r\n        </Modal>\r\n    )\r\n})","import { Redirect, Route, RouteComponentProps, RouteProps } from \"react-router-dom\";\r\nimport { useStore } from \"../stores/store\";\r\n\r\ninterface Props extends RouteProps {\r\n    component: React.ComponentType<RouteComponentProps<any>> | React.ComponentType<any>;\r\n}\r\n\r\nexport default function PrivateRoute({ component: Component, ...rest }: Props) {\r\n    const { userStore: { isLoggedIn }} = useStore();\r\n    return (\r\n        <Route\r\n            {...rest}\r\n            render={(props) => isLoggedIn ? <Component {...props} /> : <Redirect to='/' />}\r\n        />\r\n    );\r\n}","import { Fragment, useEffect } from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport { Flip, ToastContainer } from 'react-toastify';\nimport { Container } from 'semantic-ui-react';\nimport './App.css';\nimport OrderCart from './features/cart/OrderCart';\nimport Dashboard from './features/inventory/Dashboard';\nimport ItemDetails from './features/inventory/ItemDetails';\nimport OrderDetails from './features/orders/OrderDetails';\nimport Profile from './features/profile/Profile';\nimport LandingPage from './layout/LandingPage';\nimport NavBar from './layout/NavBar';\nimport { useStore } from './stores/store';\nimport UserList from './features/accounts/UserList';\nimport ModalContainer from './layout/ModalContainer';\nimport PrivateRoute from './layout/PrivateRoute';\n\nfunction App() {\n  const { userStore } = useStore();;\n  const { getCurrentUser } = userStore;\n\n  useEffect(() => {\n    const token = localStorage.getItem('inventoryToken');\n    if (token) {\n      getCurrentUser();\n    }\n  }, [getCurrentUser]);\n\n  return (\n    <Fragment>\n      <ToastContainer position=\"bottom-right\" theme=\"colored\" transition={Flip} />\n      <ModalContainer />\n      <Route exact path='/' component={LandingPage} />\n      <Route\n        path={'/(.+)'}\n        render={() => (\n          <Fragment>\n            <NavBar />\n            <Container style={{marginTop: '7rem'}}>\n              <Switch>\n                <PrivateRoute exact path=\"/dashboard\" component={Dashboard} />\n                <PrivateRoute path=\"/items/:id\" component={ItemDetails} />\n                <PrivateRoute path=\"/cart\" component={OrderCart} />\n                <PrivateRoute path=\"/profiles/:username\" component={Profile} />\n                <PrivateRoute path=\"/orders/:orderId\" component={OrderDetails} />\n                <PrivateRoute path=\"/users\" component={UserList} />\n              </Switch>\n            </Container>\n          </Fragment>\n        )}\n      />\n    </Fragment>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { useEffect } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nexport default function ScrollToTop() {\r\n    const { pathname } = useLocation();\r\n    useEffect(() => {\r\n        window.scrollTo(0, 0);\r\n    }, [pathname]);\r\n\r\n    return null;\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'semantic-ui-css/semantic.min.css';\nimport 'react-toastify/dist/ReactToastify.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { store, StoreContext } from './stores/store';\nimport { createBrowserHistory } from 'history';\nimport { Router } from 'react-router-dom';\nimport ScrollToTop from './layout/ScrollToTop';\n\nexport const history = createBrowserHistory();\nReactDOM.render(\n  <StoreContext.Provider value={store}>\n    <React.StrictMode>\n      <Router history={history}>\n        <ScrollToTop />\n        <App />\n      </Router>\n    </React.StrictMode>\n  </StoreContext.Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}